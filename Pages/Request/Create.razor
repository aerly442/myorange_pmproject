@page "/Request/Create/{Id:int}"
@using myorange_pmproject.DTO
@using myorange_pmproject.Service
@inject RequestService mService
@attribute [Authorize(Roles = "Admin, User")]
@inject NavigationManager nv
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
 
@inject IWebHostEnvironment Environment

<PageTitle>创建需求</PageTitle>
<div class="container mt-5">
    <h2>需求信息表单</h2>

    <div class="mb-3">
        <label for="projectName" class="form-label">名称</label>
        <input type="text" @bind="p.Title" class="form-control"
              placeholder="请输入名称">
    </div>
    <div class="mb-3">
        <label for="projectIntro" class="form-label">描述</label>
        <textarea class="form-control" @bind="p.Content"
                  rows="3" placeholder="请输入描述"></textarea>
    </div>
    
     
    <div class="mb-3">
        <label for="projectState" class="form-label">状态</label>
        <select class="form-select"  @bind="p.Request_type">
            <option selected value="0">请选择类...</option>
            <option value="1">需求</option>
            <option value="2">Bug</option>
        </select>

        <InputFile OnChange="LoadFiles" multiple />
    </div>
    <div class="alert alert-danger " style="display:@ErrorDisplay">
        @ErrorInfo
    </div>
    <button class="btn btn-primary" @onclick="SaveData">提交</button>

</div>


@code {


    @code {
        private List<IBrowserFile> loadedFiles = new();
        private long maxFileSize = 1024 * 15;
        private int maxAllowedFiles = 3;
        private bool isLoading;
        private decimal progressPercent;

    //     private async Task LoadFiles(InputFileChangeEventArgs e)
    //     {
    //         isLoading = true;
    //         loadedFiles.Clear();
    //         progressPercent = 0;

    //         foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
    //         {
    //             try
    //             {
    //                 var trustedFileName = Path.GetRandomFileName();
    //                 var path = Path.Combine(Environment.ContentRootPath,
    //                     Environment.EnvironmentName, "unsafe_uploads", trustedFileName);

    //                 await using FileStream writeStream = new(path, FileMode.Create);
    //                 using var readStream = file.OpenReadStream(maxFileSize);
    //                 var bytesRead = 0;
    //                 var totalRead = 0;
    //                 var buffer = new byte[1024 * 10];

    //                 while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
    //                 {
    //                     totalRead += bytesRead;
    //                     await writeStream.WriteAsync(buffer, 0, bytesRead);
    //                     progressPercent = Decimal.Divide(totalRead, file.Size);
    //                     StateHasChanged();
    //                 }

    //                 loadedFiles.Add(file);

    //                 Logger.LogInformation(
    //                     "Unsafe Filename: {UnsafeFilename} File saved: {Filename}",
    //                     file.Name, trustedFileName);
    //             }
    //             catch (Exception ex)
    //             {
    //                 Logger.LogError("File: {FileName} Error: {Error}",
    //                     file.Name, ex.Message);
    //             }
    //         }

    //         isLoading = false;
    //     }
    // }

    //private IFormFile selectedFile;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //isLoading = true;
        //loadedFiles.Clear();

        var files = e.GetMultipleFiles();


        // foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        // {
        //     try
        //     {
        //         var trustedFileName = Path.GetRandomFileName();
        //         var path = Path.Combine(Environment.ContentRootPath,
        //             Environment.EnvironmentName, "unsafe_uploads",
        //             trustedFileName);

        //         await using FileStream fs = new(path, FileMode.Create);
        //         await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

        //         loadedFiles.Add(file);

        //         Logger.LogInformation(
        //             "Unsafe Filename: {UnsafeFilename} File saved: {Filename}",
        //             file.Name, trustedFileName);
        //     }
        //     catch (Exception ex)
        //     {
        //         Logger.LogError("File: {Filename} Error: {Error}",
        //             file.Name, ex.Message);
        //     }
        // }

        // isLoading = false;
    }


    private Project_requestDTO p = new Project_requestDTO();
    private String ErrorInfo = "";

    [Parameter]
    public int Id { get; set; }

    private String ErrorDisplay = "none";

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            p = await mService.GetSinger(Id);
        }

    }

    private async Task SaveData()
    {

        if (String.IsNullOrEmpty(p.Title) || String.IsNullOrEmpty(p.Content))
        {

            ErrorInfo = "请输入名称和内容";
            ErrorDisplay = "block";

        }
        else
        {

            var blnSave = await mService.Save(p);
            ErrorInfo = blnSave ? "保存成功" : "保存失败";
            if (blnSave)
            {

                nv.NavigateTo("/Request/List");

            }
            else
            {
                ErrorDisplay = "block";
            }


        }




    }





}


@* 
    @page "/file-upload-3"

    @inject ILogger<FileUpload3> Logger

    @inject IWebHostEnvironment Environment

    <PageTitle>File Upload 3</PageTitle>

    <h1>File Upload Example 3</h1>

    <p>
        <label>
            Max file size:
            <input type="number" @bind="maxFileSize" />
        </label>
    </p>

    <p>
        <label>
            Max allowed files:
            <input type="number" @bind="maxAllowedFiles" />
        </label>
    </p>

    <p>
        <label>
            Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
            <InputFile OnChange="LoadFiles" multiple />
        </label>
    </p>

    @if (isLoading)
    {
        <p>Progress: @string.Format("{0:P0}", progressPercent)</p>
    }
    else
    {
        <ul>
            @foreach (var file in loadedFiles)
            {
                <li>
                    <ul>
                        <li>Name: @file.Name</li>
                        <li>Last modified: @file.LastModified.ToString()</li>
                        <li>Size (bytes): @file.Size</li>
                        <li>Content type: @file.ContentType</li>
                    </ul>
                </li>
            }
        </ul>
    }

    @code {
        private List<IBrowserFile> loadedFiles = new();
        private long maxFileSize = 1024 * 15;
        private int maxAllowedFiles = 3;
        private bool isLoading;
        private decimal progressPercent;

        private async Task LoadFiles(InputFileChangeEventArgs e)
        {
            isLoading = true;
            loadedFiles.Clear();
            progressPercent = 0;

            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                try
                {
                    var trustedFileName = Path.GetRandomFileName();
                    var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads", trustedFileName);

                    await using FileStream writeStream = new(path, FileMode.Create);
                    using var readStream = file.OpenReadStream(maxFileSize);
                    var bytesRead = 0;
                    var totalRead = 0;
                    var buffer = new byte[1024 * 10];

                    while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                    {
                        totalRead += bytesRead;
                        await writeStream.WriteAsync(buffer, 0, bytesRead);
                        progressPercent = Decimal.Divide(totalRead, file.Size);
                        StateHasChanged();
                    }

                    loadedFiles.Add(file);

                    Logger.LogInformation(
                        "Unsafe Filename: {UnsafeFilename} File saved: {Filename}",
                        file.Name, trustedFileName);
                }
                catch (Exception ex)
                {
                    Logger.LogError("File: {FileName} Error: {Error}",
                        file.Name, ex.Message);
                }
            }

            isLoading = false;
        }
    } *@